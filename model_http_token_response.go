/*
Podinfo API

Go microservice template for Kubernetes.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package podinfo

import (
	"encoding/json"
)

// checks if the HttpTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpTokenResponse{}

// HttpTokenResponse struct for HttpTokenResponse
type HttpTokenResponse struct {
	ExpiresAt *string `json:"expires_at,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewHttpTokenResponse instantiates a new HttpTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpTokenResponse() *HttpTokenResponse {
	this := HttpTokenResponse{}
	return &this
}

// NewHttpTokenResponseWithDefaults instantiates a new HttpTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpTokenResponseWithDefaults() *HttpTokenResponse {
	this := HttpTokenResponse{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *HttpTokenResponse) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTokenResponse) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *HttpTokenResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *HttpTokenResponse) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *HttpTokenResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpTokenResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *HttpTokenResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *HttpTokenResponse) SetToken(v string) {
	o.Token = &v
}

func (o HttpTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableHttpTokenResponse struct {
	value *HttpTokenResponse
	isSet bool
}

func (v NullableHttpTokenResponse) Get() *HttpTokenResponse {
	return v.value
}

func (v *NullableHttpTokenResponse) Set(val *HttpTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpTokenResponse(val *HttpTokenResponse) *NullableHttpTokenResponse {
	return &NullableHttpTokenResponse{value: val, isSet: true}
}

func (v NullableHttpTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


