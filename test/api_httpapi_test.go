/*
Podinfo API

Testing HTTPAPIAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package podinfo

import (
	"context"
	"crypto/sha1"
	"encoding/hex"
	"testing"

	openapiclient "github.com/bluecontainer/podinfo-client-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func hash(input string) string {
	h := sha1.New()
	h.Write([]byte(input))
	return hex.EncodeToString(h.Sum(nil))
}
func Test_podinfo_HTTPAPIAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	configuration.Servers[0].URL = "http://localhost:9898"
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HTTPAPIAPIService ApiEchoPost", func(t *testing.T) {

		// t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.ApiEchoPost(context.Background()).Value("hello").Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, "hello", resp)
		assert.Equal(t, 202, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService ApiInfoGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.ApiInfoGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService CacheKeyDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var key string

		httpRes, err := apiClient.HTTPAPIAPI.CacheKeyDelete(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService CacheKeyGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var key string

		resp, httpRes, err := apiClient.HTTPAPIAPI.CacheKeyGet(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService CacheKeyPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var key string

		httpRes, err := apiClient.HTTPAPIAPI.CacheKeyPost(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService ChunkedSecondsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var seconds int32

		resp, httpRes, err := apiClient.HTTPAPIAPI.ChunkedSecondsGet(context.Background(), seconds).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService DelaySecondsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var seconds int32

		resp, httpRes, err := apiClient.HTTPAPIAPI.DelaySecondsGet(context.Background(), seconds).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService EnvGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.EnvGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService HeadersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.HeadersGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService PanicGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.HTTPAPIAPI.PanicGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService RootGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.RootGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService StatusCodeGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var code int32

		resp, httpRes, err := apiClient.HTTPAPIAPI.StatusCodeGet(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService StoreHashGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hash string

		resp, httpRes, err := apiClient.HTTPAPIAPI.StoreHashGet(context.Background(), hash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService StorePost", func(t *testing.T) {

		// t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.StorePost(context.Background()).Value("hello").Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 202, httpRes.StatusCode)
		assert.Equal(t, resp["hash"], hash("hello"))
	})

	t.Run("Test HTTPAPIAPIService TokenPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.TokenPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService TokenValidatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.TokenValidatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService VersionGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.VersionGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HTTPAPIAPIService WsEchoPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HTTPAPIAPI.WsEchoPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
